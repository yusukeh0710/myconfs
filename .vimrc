" Status Bar
"set statusline=%F%m%r%h%w\%=[FMT=%{&ff}]\ [%03l,%03v]\ (%p%%)
set statusline=%F%m%r%h%w\%=[%03l,%03v]\ (%p%%)
set laststatus=2

" Indent
set expandtab
set tabstop=2
set shiftwidth=2
set autoindent
" set smartindent

" Search
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

if has("path_extra")
  set tags+=./tags;
endif

" Completion
set wildmenu
set wildmode=longest:full,full

" View
set showmatch
set hlsearch
set incsearch
colorscheme desert

"-----------------------------
" Mapping
"-----------------------------
" Disables
nmap <F1> <nop>
imap <F1> <nop>
vnoremap <silent> p "0p

" Function button shortcut
nnoremap <F3> :<C-u>setlocal relativenumber!<CR>
nnoremap <F5> :bo :terminal ++close ++rows=15 bash<CR>
nnoremap <F6> :belowright :vertical :terminal ++close bash<CR>
autocmd FileType c,cc,cpp nnoremap <F10> :ClangFormat<CR>
autocmd FileType python nnoremap <F10> :!black %<CR>
inoremap <F5> <Esc>:bo :terminal ++close ++rows=15 bash<CR>
inoremap <F6> <Esc>:belowright :vertical :terminal ++close bash<CR>

"tnoremap <esc><Up> <Up>
"tnoremap <Esc> <C-w><S-n>
tnoremap <Esc><Esc> <C-\><C-n>

" Completion of parenthesis
inoremap {<Enter> {}<Left><CR><ESC><S-o>
inoremap <silent> jj <ESC>

" Window
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
inoremap <C-j> <Esc><C-w>j
inoremap <C-k> <Esc><C-w>k
inoremap <C-h> <Esc><C-w>h
inoremap <C-l> <Esc><C-w>l
tnoremap <C-j> <C-w>j
tnoremap <C-k> <C-w>k
nnoremap - <C-w>-
nnoremap + <C-w>+


" Save :
" Append below commands in .bashrc
" bind -r '\C-s'
" stty -ixon
nnoremap <C-s> :w<CR>
inoremap <C-s> <Esc>:w<CR>
cabbr w!! w !sudo tee > /dev/null %

"-----------------------------
" Auto Command
"-----------------------------
" autocmd BufWritePre *.{c,cc,py,html,js,json} :%s/\s\+$//ge
autocmd BufWritePre * :%s/\s\+$//ge
autocmd QuickFixCmdPost *grep* botright cwindow

"-----------------------------
" Syntax Hilight
"-----------------------------
syn keyword cppType vector string
syn keyword cppStatement const override

"-----------------------------
" NeoBundle
"-----------------------------
" pre-action:
"   $ mkdir -p ~/.vim/bundle
"   $ git clone git://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim

filetype plugin indent off
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim
  call neobundle#begin(expand('~/.vim/bundle/'))
    NeoBundleFetch 'Shougo/neobundle.vim'
    NeoBundle 'Shougo/unite.vim'
    NeoBundle "Shougo/unite-outline"
    NeoBundle 'Shougo/neocomplete.vim'
    NeoBundle "Shougo/neosnippet"
    NeoBundle "Shougo/neosnippet-snippets"
    NeoBundle 'Shougo/vimproc.vim', {
    \    'build' : {
    \        'linux' : 'make',
    \    },
    \ }
    NeoBundle "Shougo/vimshell.git"
    NeoBundle "tsukkee/unite-tag.git"
    NeoBundle "vim-scripts/a.vim.git"
    NeoBundleLazy 'kana/vim-smartchr',  { 'autoload' : {'insert' : '1'} }
    NeoBundle 'rhysd/vim-clang-format'
    NeoBundle 'prettier/vim-prettier'
    NeoBundle 'psf/black'
  call neobundle#end()
  NeoBundleCheck
endif
filetype plugin indent on

"-----------------------------
" unite.vim
"-----------------------------
call unite#custom#profile('default', 'context', {
  \   'direction': 'botright',
  \ })

let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
let g:unite_source_grep_recursive_opt = ''

nnoremap <F2> :Unite -direction=topleft -vertical -winwidth=20 file<CR>
nnoremap [unite]   <Nop>
nmap     <Space>u [unite]

nnoremap <silent> [unite]f :Unite -direction=topleft -vertical -winwidth=20 file_rec/async<CR>
nnoremap <silent> [unite]b :Unite buffer<CR>
nnoremap <silent> [unite]o :Unite -direction=topleft -vertical -winwidth=40 outline<CR>
nnoremap <silent> [unite]g :Unite grep -buffer-name=search-buffer<CR>

"-----------------------------
" neocomplete.vim
"-----------------------------
let g:neocomplete#enable_at_startup = 1  " auto enable
let g:neocomplete#enable_smart_case = 1  " ignore case
let g:neocomplete#min_keyword_length = 3
let g:neocomplete#enable_auto_delimiter = 1
let g:neocomplete#auto_completion_start_length = 1

" By BackSpace key, close pop-up for completion.
inoremap <expr><BS> neocomplete#smart_close_popup()."<C-h>"
" By TAB key and Enter key, select completion candidate.
imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets/,~/.vim/snippets'


"-----------------------------
" unite-tag
"   using tag file generated by ctags
"-----------------------------
command!
  \ -nargs=? PopUpTags
  \ |Unite tag:<args>

noremap <silent> <F12> :<C-u>execute "PopUpTags ".expand('<cword>')<CR>

" smartchr
autocmd FileType c,cc,cpp,python inoremap <buffer><expr> = smartchr#loop(' = ', ' == ', '=')
"autocmd FileType c,cc,cpp inoremap <buffer><expr> ( smartchr#loop(' (', ' ((', '(')
"autocmd FileType c,cc,cpp inoremap <buffer><expr> ) smartchr#loop(') ', ')) ', ')')
autocmd FileType c,cc,cpp inoremap <buffer><expr> + smartchr#one_of(' + ')
autocmd FileType c,cc,cpp inoremap <buffer><expr> ++ smartchr#one_of('++')
autocmd FileType c,cc,cpp inoremap <buffer><expr> += smartchr#one_of(' += ')
"autocmd FileType c,cc,cpp inoremap <buffer><expr> - smartchr#one_of(' - ')
autocmd FileType c,cc,cpp inoremap <buffer><expr> -- smartchr#one_of('--')
autocmd FileType c,cc,cpp inoremap <buffer><expr> -= smartchr#one_of(' -= ')
autocmd FileType c,cc,cpp inoremap <buffer><expr> *= smartchr#one_of(' *= ')
autocmd FileType c,cc,cpp inoremap <buffer><expr> /= smartchr#one_of(' /= ')
autocmd FileType c,cc,cpp inoremap <buffer><expr> %= smartchr#one_of(' %= ')
autocmd FileType c,cc,cpp inoremap <buffer><expr> != smartchr#one_of(' != ')
autocmd FileType c,cc,cpp inoremap <buffer><expr> << smartchr#one_of(' << ')
autocmd FileType c,cc,cpp inoremap <buffer><expr> <= smartchr#one_of(' <= ')
autocmd FileType c,cc,cpp inoremap <buffer><expr> >> smartchr#one_of(' >> ')
autocmd FileType c,cc,cpp inoremap <buffer><expr> >= smartchr#one_of(' >= ')
autocmd FileType c,cc,cpp inoremap <buffer><expr> -> smartchr#one_of('->')
autocmd FileType c,cc,cpp,python inoremap <buffer><expr> , smartchr#one_of(', ', ',,')
"autocmd FileType c,cc,cpp inoremap <buffer><expr> < search('^#include\%#', 'bcn') ? ' <' : smartchr#one_of(' < ', ' << ', '<')
